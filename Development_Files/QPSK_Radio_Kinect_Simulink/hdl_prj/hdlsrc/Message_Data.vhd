-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\Message_Data.vhd
-- Created: 2013-05-26 21:23:00
-- 
-- Generated by MATLAB 8.0 and HDL Coder 3.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Message_Data
-- Source Path: QPSK_system_v3g/TX_SYSTEM_TOP/TX_CORE_DELAYED_SUBSYSTEM/TX_CORE/GEN_MOD_SHAPED_TX_DATA_PACKET/GEN_MODULATED_TX_DATA_PACKET/Message_Data
-- Hierarchy Level: 5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Message_Data IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        MESSAGE_DATA_BYTE                 :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        INITIALIZE_TX_CORE                :   IN    std_logic;
        Enable                            :   IN    std_logic;
        MESSAGE_I_MODULATED               :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
        MESSAGE_Q_MODULATED               :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
        Message_I_Binary                  :   OUT   std_logic;  -- ufix1
        Message_Q_Binary                  :   OUT   std_logic;  -- ufix1
        Get_New_Data_Byte_For_Parser      :   OUT   std_logic;
        Data_IQ_Parser_Counter            :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
        );
END Message_Data;


ARCHITECTURE rtl OF Message_Data IS

  -- Component Declarations
  COMPONENT IQ_Parser
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          MESSAGE_DATA_BYTE               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          INITIALIZE_TX_CORE              :   IN    std_logic;
          MESSAGE_I_BINARY                :   OUT   std_logic;  -- ufix1
          MESSAGE_Q_BINARY                :   OUT   std_logic;  -- ufix1
          Get_New_Data_Byte_For_Mod       :   OUT   std_logic;
          Data_IQ_Parser_Counter_Copy     :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  COMPONENT QPSK_Modulator
    PORT( MESSAGE_I_BINARY                :   IN    std_logic;  -- ufix1
          MESSAGE_Q_BINARY                :   IN    std_logic;  -- ufix1
          MESSAGE_I_MODULATED             :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
          MESSAGE_Q_MODULATED             :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : IQ_Parser
    USE ENTITY work.IQ_Parser(rtl);

  FOR ALL : QPSK_Modulator
    USE ENTITY work.QPSK_Modulator(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out3                      : std_logic;
  SIGNAL IQ_Parser_out1                   : std_logic;  -- ufix1
  SIGNAL IQ_Parser_out2                   : std_logic;  -- ufix1
  SIGNAL IQ_Parser_out3                   : std_logic;
  SIGNAL IQ_Parser_out4                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL QPSK_Modulator_out1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL QPSK_Modulator_out2              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL QPSK_Modulator_out1_signed       : signed(7 DOWNTO 0);  -- int8
  SIGNAL QPSK_Modulator_out1_last_value   : signed(7 DOWNTO 0);  -- int8
  SIGNAL QPSK_Modulator_out1_bypass       : signed(7 DOWNTO 0);  -- int8
  SIGNAL QPSK_Modulator_out2_signed       : signed(7 DOWNTO 0);  -- int8
  SIGNAL QPSK_Modulator_out2_last_value   : signed(7 DOWNTO 0);  -- int8
  SIGNAL QPSK_Modulator_out2_bypass       : signed(7 DOWNTO 0);  -- int8
  SIGNAL IQ_Parser_out1_last_value        : std_logic;  -- ufix1
  SIGNAL IQ_Parser_out1_bypass            : std_logic;  -- ufix1
  SIGNAL IQ_Parser_out2_last_value        : std_logic;  -- ufix1
  SIGNAL IQ_Parser_out2_bypass            : std_logic;  -- ufix1
  SIGNAL IQ_Parser_out3_last_value        : std_logic;
  SIGNAL IQ_Parser_out3_bypass            : std_logic;
  SIGNAL IQ_Parser_out4_unsigned          : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL IQ_Parser_out4_last_value        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL IQ_Parser_out4_bypass            : unsigned(31 DOWNTO 0);  -- uint32

BEGIN
  u_IQ_Parser : IQ_Parser
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              MESSAGE_DATA_BYTE => MESSAGE_DATA_BYTE,  -- uint8
              INITIALIZE_TX_CORE => INITIALIZE_TX_CORE,
              MESSAGE_I_BINARY => IQ_Parser_out1,  -- ufix1
              MESSAGE_Q_BINARY => IQ_Parser_out2,  -- ufix1
              Get_New_Data_Byte_For_Mod => IQ_Parser_out3,
              Data_IQ_Parser_Counter_Copy => IQ_Parser_out4  -- uint32
              );

  u_QPSK_Modulator : QPSK_Modulator
    PORT MAP( MESSAGE_I_BINARY => IQ_Parser_out1,  -- ufix1
              MESSAGE_Q_BINARY => IQ_Parser_out2,  -- ufix1
              MESSAGE_I_MODULATED => QPSK_Modulator_out1,  -- int8
              MESSAGE_Q_MODULATED => QPSK_Modulator_out2  -- int8
              );

  Enable_out3 <= Enable;

  enb_gated <= Enable_out3 AND enb;

  QPSK_Modulator_out1_signed <= signed(QPSK_Modulator_out1);

  MESSAGE_I_MODULATED_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      QPSK_Modulator_out1_last_value <= to_signed(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        QPSK_Modulator_out1_last_value <= QPSK_Modulator_out1_signed;
      END IF;
    END IF;
  END PROCESS MESSAGE_I_MODULATED_bypass_process;


  
  QPSK_Modulator_out1_bypass <= QPSK_Modulator_out1_last_value WHEN Enable_out3 = '0' ELSE
      QPSK_Modulator_out1_signed;

  MESSAGE_I_MODULATED <= std_logic_vector(QPSK_Modulator_out1_bypass);

  QPSK_Modulator_out2_signed <= signed(QPSK_Modulator_out2);

  MESSAGE_Q_MODULATED_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      QPSK_Modulator_out2_last_value <= to_signed(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        QPSK_Modulator_out2_last_value <= QPSK_Modulator_out2_signed;
      END IF;
    END IF;
  END PROCESS MESSAGE_Q_MODULATED_bypass_process;


  
  QPSK_Modulator_out2_bypass <= QPSK_Modulator_out2_last_value WHEN Enable_out3 = '0' ELSE
      QPSK_Modulator_out2_signed;

  MESSAGE_Q_MODULATED <= std_logic_vector(QPSK_Modulator_out2_bypass);

  Message_I_Binary_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IQ_Parser_out1_last_value <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        IQ_Parser_out1_last_value <= IQ_Parser_out1;
      END IF;
    END IF;
  END PROCESS Message_I_Binary_bypass_process;


  
  IQ_Parser_out1_bypass <= IQ_Parser_out1_last_value WHEN Enable_out3 = '0' ELSE
      IQ_Parser_out1;

  Message_Q_Binary_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IQ_Parser_out2_last_value <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        IQ_Parser_out2_last_value <= IQ_Parser_out2;
      END IF;
    END IF;
  END PROCESS Message_Q_Binary_bypass_process;


  
  IQ_Parser_out2_bypass <= IQ_Parser_out2_last_value WHEN Enable_out3 = '0' ELSE
      IQ_Parser_out2;

  Get_New_Data_Byte_For_Parser_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IQ_Parser_out3_last_value <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        IQ_Parser_out3_last_value <= IQ_Parser_out3;
      END IF;
    END IF;
  END PROCESS Get_New_Data_Byte_For_Parser_bypass_process;


  
  IQ_Parser_out3_bypass <= IQ_Parser_out3_last_value WHEN Enable_out3 = '0' ELSE
      IQ_Parser_out3;

  IQ_Parser_out4_unsigned <= unsigned(IQ_Parser_out4);

  Data_IQ_Parser_Counter_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      IQ_Parser_out4_last_value <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        IQ_Parser_out4_last_value <= IQ_Parser_out4_unsigned;
      END IF;
    END IF;
  END PROCESS Data_IQ_Parser_Counter_bypass_process;


  
  IQ_Parser_out4_bypass <= IQ_Parser_out4_last_value WHEN Enable_out3 = '0' ELSE
      IQ_Parser_out4_unsigned;

  Data_IQ_Parser_Counter <= std_logic_vector(IQ_Parser_out4_bypass);

  Message_I_Binary <= IQ_Parser_out1_bypass;

  Message_Q_Binary <= IQ_Parser_out2_bypass;

  Get_New_Data_Byte_For_Parser <= IQ_Parser_out3_bypass;

END rtl;

