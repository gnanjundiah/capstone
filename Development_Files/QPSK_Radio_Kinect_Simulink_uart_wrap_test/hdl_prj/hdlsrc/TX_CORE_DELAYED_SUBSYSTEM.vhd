-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\TX_CORE_DELAYED_SUBSYSTEM.vhd
-- Created: 2013-05-14 21:08:20
-- 
-- Generated by MATLAB 8.0 and HDL Coder 3.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TX_CORE_DELAYED_SUBSYSTEM
-- Source Path: QPSK_Transmit_v12a/TX_SYSTEM_TOP/TX_CORE_DELAYED_SUBSYSTEM
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.TX_SYSTEM_TOP_pkg.ALL;

ENTITY TX_CORE_DELAYED_SUBSYSTEM IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        MESSAGE_DATA_BYTE                 :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        FIFO_EMPTY                        :   IN    std_logic;
        Enable                            :   IN    std_logic;
        FIFO_RD_EN                        :   OUT   std_logic;
        MODULATED_SHAPED_I                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En11
        MODULATED_SHAPED_Q                :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En11
        );
END TX_CORE_DELAYED_SUBSYSTEM;


ARCHITECTURE rtl OF TX_CORE_DELAYED_SUBSYSTEM IS

  -- Component Declarations
  COMPONENT TX_CORE
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          MESSAGE_DATA_BYTE               :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          FIFO_EMPTY                      :   IN    std_logic;
          INITIALIZE_TX_CORE              :   IN    std_logic;
          FIFO_RD_EN                      :   OUT   std_logic;
          MODULATED_SHAPED_I              :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12_En11
          MODULATED_SHAPED_Q              :   OUT   std_logic_vector(11 DOWNTO 0)  -- sfix12_En11
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : TX_CORE
    USE ENTITY work.TX_CORE(rtl);

  -- Signals
  SIGNAL enb_gated                        : std_logic;
  SIGNAL Enable_out3                      : std_logic;
  SIGNAL MESSAGE_DATA_BYTE_unsigned       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL FIFO_EMPTY_Z24_DELAY_reg         : vector_of_unsigned8(0 TO 23);  -- ufix8 [24]
  SIGNAL FIFO_EMPTY_Z24_DELAY_out1        : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Compare_To_Zero2_out1            : std_logic;
  SIGNAL FIFO_EMPTY_Z64_DELAY_reg         : std_logic_vector(0 TO 63);  -- ufix1 [64]
  SIGNAL FIFO_EMPTY_Z64_DELAY_out1        : std_logic;
  SIGNAL FIFO_EMPTY_Z64_Delay_reg_1       : std_logic_vector(0 TO 63);  -- ufix1 [64]
  SIGNAL FIFO_EMPTY_Z64_Delay_out1_1      : std_logic;
  SIGNAL TX_CORE_out1                     : std_logic;
  SIGNAL TX_CORE_out2                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL TX_CORE_out3                     : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL TX_CORE_out1_last_value          : std_logic;
  SIGNAL TX_CORE_out1_bypass              : std_logic;
  SIGNAL TX_CORE_out2_signed              : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL TX_CORE_out2_last_value          : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL TX_CORE_out2_bypass              : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL TX_CORE_out3_signed              : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL TX_CORE_out3_last_value          : signed(11 DOWNTO 0);  -- sfix12_En11
  SIGNAL TX_CORE_out3_bypass              : signed(11 DOWNTO 0);  -- sfix12_En11

BEGIN
  u_TX_CORE : TX_CORE
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb_gated,
              MESSAGE_DATA_BYTE => std_logic_vector(FIFO_EMPTY_Z24_DELAY_out1),  -- uint8
              FIFO_EMPTY => FIFO_EMPTY_Z64_DELAY_out1,
              INITIALIZE_TX_CORE => FIFO_EMPTY_Z64_Delay_out1_1,
              FIFO_RD_EN => TX_CORE_out1,
              MODULATED_SHAPED_I => TX_CORE_out2,  -- sfix12_En11
              MODULATED_SHAPED_Q => TX_CORE_out3  -- sfix12_En11
              );

  Enable_out3 <= Enable;

  MESSAGE_DATA_BYTE_unsigned <= unsigned(MESSAGE_DATA_BYTE);

  enb_gated <= Enable_out3 AND enb;

  FIFO_EMPTY_Z24_DELAY_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FIFO_EMPTY_Z24_DELAY_reg <= (OTHERS => to_unsigned(0, 8));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        FIFO_EMPTY_Z24_DELAY_reg(0) <= MESSAGE_DATA_BYTE_unsigned;
        FIFO_EMPTY_Z24_DELAY_reg(1 TO 23) <= FIFO_EMPTY_Z24_DELAY_reg(0 TO 22);
      END IF;
    END IF;
  END PROCESS FIFO_EMPTY_Z24_DELAY_process;

  FIFO_EMPTY_Z24_DELAY_out1 <= FIFO_EMPTY_Z24_DELAY_reg(23);

  
  Compare_To_Zero2_out1 <= '1' WHEN FIFO_EMPTY <= '0' ELSE
      '0';

  FIFO_EMPTY_Z64_DELAY_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FIFO_EMPTY_Z64_DELAY_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        FIFO_EMPTY_Z64_DELAY_reg(0) <= Compare_To_Zero2_out1;
        FIFO_EMPTY_Z64_DELAY_reg(1 TO 63) <= FIFO_EMPTY_Z64_DELAY_reg(0 TO 62);
      END IF;
    END IF;
  END PROCESS FIFO_EMPTY_Z64_DELAY_process;

  FIFO_EMPTY_Z64_DELAY_out1 <= FIFO_EMPTY_Z64_DELAY_reg(63);

  FIFO_EMPTY_Z64_Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      FIFO_EMPTY_Z64_Delay_reg_1 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        FIFO_EMPTY_Z64_Delay_reg_1(0) <= FIFO_EMPTY;
        FIFO_EMPTY_Z64_Delay_reg_1(1 TO 63) <= FIFO_EMPTY_Z64_Delay_reg_1(0 TO 62);
      END IF;
    END IF;
  END PROCESS FIFO_EMPTY_Z64_Delay_1_process;

  FIFO_EMPTY_Z64_Delay_out1_1 <= FIFO_EMPTY_Z64_Delay_reg_1(63);

  FIFO_RD_EN_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      TX_CORE_out1_last_value <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        TX_CORE_out1_last_value <= TX_CORE_out1;
      END IF;
    END IF;
  END PROCESS FIFO_RD_EN_bypass_process;


  
  TX_CORE_out1_bypass <= TX_CORE_out1_last_value WHEN Enable_out3 = '0' ELSE
      TX_CORE_out1;

  TX_CORE_out2_signed <= signed(TX_CORE_out2);

  MODULATED_SHAPED_I_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      TX_CORE_out2_last_value <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        TX_CORE_out2_last_value <= TX_CORE_out2_signed;
      END IF;
    END IF;
  END PROCESS MODULATED_SHAPED_I_bypass_process;


  
  TX_CORE_out2_bypass <= TX_CORE_out2_last_value WHEN Enable_out3 = '0' ELSE
      TX_CORE_out2_signed;

  MODULATED_SHAPED_I <= std_logic_vector(TX_CORE_out2_bypass);

  TX_CORE_out3_signed <= signed(TX_CORE_out3);

  MODULATED_SHAPED_Q_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      TX_CORE_out3_last_value <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_gated = '1' THEN
        TX_CORE_out3_last_value <= TX_CORE_out3_signed;
      END IF;
    END IF;
  END PROCESS MODULATED_SHAPED_Q_bypass_process;


  
  TX_CORE_out3_bypass <= TX_CORE_out3_last_value WHEN Enable_out3 = '0' ELSE
      TX_CORE_out3_signed;

  MODULATED_SHAPED_Q <= std_logic_vector(TX_CORE_out3_bypass);

  FIFO_RD_EN <= TX_CORE_out1_bypass;

END rtl;

